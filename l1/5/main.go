package main

import (
  "fmt" // для форматированного ввода/вывода
  "sync" // для примитивов синхронизации (WaitGroup)
  "time" // для работы со временем
)

func main() {
  // Запрос ввода от пользователя (количество секунд)
  var sec int
  fmt.Scan(&sec)

  // Создание нового тикера, срабатывающего каждые `sec` секунды
  ticker := time.NewTicker(time.Second * time.Duration(sec))

  // Создание WaitGroup для отслеживания завершения горутин
  var wg sync.WaitGroup
  wg.Add(1) // Добавить одну задачу в WaitGroup (ожидание канала тикера)

  // Запуск горутины для приема из канала тикера (ожидает заданного времени)
  go func() {
    defer wg.Done() // Сигнализировать о завершении, когда функция завершится
    <-ticker.C     // Ожидание получения сообщения на канале тикера
  }()

  // Создание канала для отправки и приема целых чисел
  ch := make(chan int)

  // Запуск горутины для отправки возрастающих целых чисел в канал навсегда
  go func(ch chan<- int) { // Этот канал может только отправлять данные (chan<- int)
    for i := 0; true; i++ {
      time.Sleep(time.Microsecond) // Ввести небольшую задержку
      ch <- i                      // Отправить текущее значение i в канал
    }
  }(ch)

  // Запуск горутины для приема и печати целых чисел из канала
  go func(ch <-chan int) { // Этот канал может только принимать данные (<-chan int)
    for v := range ch {
      fmt.Println(v) // Печать полученного значения (i)
    }
  }(ch)

  // Ожидание завершения всех горутин, отслеживаемых WaitGroup
  wg.Wait()
}
