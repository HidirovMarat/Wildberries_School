package main

// quickSort - функция для сортировки массива с помощью быстрой сортировки
func quickSort(arr []int, low, high int) []int {
	// Проверка условия рекурсии (левый индекс меньше правого)
	if low < high {
		var p int                          // Индекс опорного элемента
		arr, p = partition(arr, low, high) // Разбиение массива и получение индекса опорного элемента
		arr = quickSort(arr, low, p-1)     // Рекурсивный вызов для левой подчасти массива
		arr = quickSort(arr, p+1, high)    // Рекурсивный вызов для правой подчасти массива
	}
	return arr // Возврат отсортированного массива
}

// quickSortStart - функция-обертка для запуска быстрой сортировки с начальными индексами
func quickSortStart(arr []int) []int {
	return quickSort(arr, 0, len(arr)-1) // Вызов quickSort с начальным и конечным индексами всего массива
}

// partition - функция для разбиения массива на две подчасти относительно опорного элемента
func partition(arr []int, low, high int) ([]int, int) {
	pivot := arr[high]            // Выбор опорного элемента (последний элемент)
	i := low                      // Индекс для левой границы подмассива элементов меньше опорного
	for j := low; j < high; j++ { // Перебор элементов массива (кроме последнего)
		if arr[j] < pivot { // Если элемент меньше опорного
			arr[i], arr[j] = arr[j], arr[i] // Swap элементов
			i++                             // Увеличение индекса левой границы
		}
	}
	arr[i], arr[high] = arr[high], arr[i] // Swap опорного элемента на его итоговую позицию
	return arr, i                         // Возврат отсортированной подчасти и индекса опорного элемента
}

func main() {
	// ... код для заполнения и вызова сортировки
}
